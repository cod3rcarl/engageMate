{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/spotify/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport request from \"request\";\nimport SpotifyButton from \"../../components/button/spotifyButton\";\nimport { config } from \"../../config\";\nimport style from \"./spotify.module.css\";\n\nfunction Spotify() {\n  _s();\n\n  const id = config.spotifyID;\n  const secret = config.spotifySecret;\n  const [playlist, setPlaylist] = useState({});\n  const [url, setUrl] = useState(\"\");\n  const [playlistIndex, setPlaylistIndex] = useState(Math.floor(Math.random() * 50));\n  const [genre, setGenre] = useState(\"workout\");\n  const [station, setStation] = useState(\"Squat FM\");\n\n  function newGenre(genre, station) {\n    setGenre(genre);\n    setStation(station);\n    handleClick();\n  }\n\n  console.log(genre);\n\n  function handleClick() {\n    setPlaylistIndex(Math.floor(Math.random() * 50));\n    console.log(playlistIndex);\n  }\n\n  useEffect(() => {\n    async function getTunes() {\n      const authOptions = {\n        url: \"https://accounts.spotify.com/api/token\",\n        headers: {\n          Authorization: \"Basic \" + Buffer.from(id + \":\" + secret).toString(\"base64\")\n        },\n        form: {\n          grant_type: \"client_credentials\"\n        },\n        json: true\n      };\n      request.post(authOptions, async function (error, response, body) {\n        if (!error && response.statusCode === 200) {\n          // use the access token to access the Spotify Web API\n          const token = body.access_token;\n          const options = {\n            url: `https://api.spotify.com/v1/browse/categories/${genre}/playlists?country=US&limit=50`,\n            headers: {\n              Authorization: \"Bearer \" + token\n            },\n            json: true\n          };\n          request.get(options, async function (error, response, body) {\n            console.log(body.playlists);\n            const playlist = body.playlists.items[playlistIndex];\n            console.log(playlist);\n            const newPlaylist = {\n              description: playlist.description,\n              name: playlist.name,\n              images: playlist.images[0].url,\n              tracks: playlist.tracks.href,\n              uri: playlist.uri.slice(17)\n            };\n            console.log(playlist.description);\n            setPlaylist(newPlaylist);\n            playlist.uri && setUrl(`https://open.spotify.com/embed/playlist/${newPlaylist.uri}`);\n          });\n        }\n      });\n    }\n\n    genre && getTunes();\n  }, [playlistIndex, genre, id, secret]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: style.underline,\n      children: \" Spotify Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), station && /*#__PURE__*/_jsxDEV(\"h6\", {\n      children: [\"You Are Now Listening to \", station]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: style.buttons,\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Choose Your Station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), playlist.name && /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: playlist.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.players,\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          title: \"playlist\",\n          src: url // https://open.spotify.com/embed/playlist/spotify:playlist:37i9dQZF1DX76Wlfdnj7AP\n          ,\n          width: \"300\",\n          height: \"380\",\n          frameBorder: \"0\",\n          allowtransparency: \"true\",\n          allow: \"encrypted-media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(SpotifyButton, {\n            myClass: style.myBtn,\n            handleClick: newGenre,\n            genre: \"workout\",\n            station: \"Squat FM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SpotifyButton, {\n            myClass: style.myBtn,\n            handleClick: newGenre,\n            genre: \"jazz\",\n            station: \"Energizer FM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SpotifyButton, {\n            myClass: style.myBtn,\n            handleClick: newGenre,\n            genre: \"classical\",\n            station: \"Recap Task FM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SpotifyButton, {\n            myClass: style.myPlaylistBtn,\n            handleClick: handleClick,\n            station: \"New Playlist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.buttons,\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Spotify, \"AT860YZ9OPsl+bY+FX7PSiXL/w4=\");\n\n_c = Spotify;\nexport default Spotify;\n\nvar _c;\n\n$RefreshReg$(_c, \"Spotify\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/spotify/index.js"],"names":["React","useEffect","useState","request","SpotifyButton","config","style","Spotify","id","spotifyID","secret","spotifySecret","playlist","setPlaylist","url","setUrl","playlistIndex","setPlaylistIndex","Math","floor","random","genre","setGenre","station","setStation","newGenre","handleClick","console","log","getTunes","authOptions","headers","Authorization","Buffer","from","toString","form","grant_type","json","post","error","response","body","statusCode","token","access_token","options","get","playlists","items","newPlaylist","description","name","images","tracks","href","uri","slice","container","underline","buttons","players","myBtn","myPlaylistBtn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport request from \"request\";\nimport SpotifyButton from \"../../components/button/spotifyButton\";\nimport { config } from \"../../config\";\nimport style from \"./spotify.module.css\";\n\nfunction Spotify() {\n  const id = config.spotifyID;\n  const secret = config.spotifySecret;\n\n  const [playlist, setPlaylist] = useState({});\n  const [url, setUrl] = useState(\"\");\n  const [playlistIndex, setPlaylistIndex] = useState(\n    Math.floor(Math.random() * 50)\n  );\n  const [genre, setGenre] = useState(\"workout\");\n  const [station, setStation] = useState(\"Squat FM\");\n\n  function newGenre(genre, station) {\n    setGenre(genre);\n    setStation(station);\n    handleClick();\n  }\n  console.log(genre);\n  function handleClick() {\n    setPlaylistIndex(Math.floor(Math.random() * 50));\n    console.log(playlistIndex);\n  }\n\n  useEffect(() => {\n    async function getTunes() {\n      const authOptions = {\n        url: \"https://accounts.spotify.com/api/token\",\n        headers: {\n          Authorization:\n            \"Basic \" + Buffer.from(id + \":\" + secret).toString(\"base64\"),\n        },\n        form: {\n          grant_type: \"client_credentials\",\n        },\n        json: true,\n      };\n\n      request.post(authOptions, async function(error, response, body) {\n        if (!error && response.statusCode === 200) {\n          // use the access token to access the Spotify Web API\n          const token = body.access_token;\n          const options = {\n            url: `https://api.spotify.com/v1/browse/categories/${genre}/playlists?country=US&limit=50`,\n            headers: {\n              Authorization: \"Bearer \" + token,\n            },\n            json: true,\n          };\n          request.get(options, async function(error, response, body) {\n            console.log(body.playlists);\n\n            const playlist = body.playlists.items[playlistIndex];\n            console.log(playlist);\n\n            const newPlaylist = {\n              description: playlist.description,\n              name: playlist.name,\n              images: playlist.images[0].url,\n              tracks: playlist.tracks.href,\n              uri: playlist.uri.slice(17),\n            };\n            console.log(playlist.description);\n            setPlaylist(newPlaylist);\n            playlist.uri &&\n              setUrl(\n                `https://open.spotify.com/embed/playlist/${newPlaylist.uri}`\n              );\n          });\n        }\n      });\n    }\n    genre && getTunes();\n  }, [playlistIndex, genre, id, secret]);\n\n  return (\n    <div className={style.container}>\n      <h1 className={style.underline}> Spotify Deck</h1>\n      {station && <h6>You Are Now Listening to {station}</h6>}\n\n      <section className={style.buttons}>\n        <h5>Choose Your Station</h5>\n        <br />\n\n        {playlist.name && <h5>{playlist.name}</h5>}\n      </section>\n\n      <div className={style.players}>\n        <section>\n          <iframe\n            title=\"playlist\"\n            src={url}\n            // https://open.spotify.com/embed/playlist/spotify:playlist:37i9dQZF1DX76Wlfdnj7AP\n            width=\"300\"\n            height=\"380\"\n            frameBorder=\"0\"\n            allowtransparency=\"true\"\n            allow=\"encrypted-media\"\n          ></iframe>\n        </section>\n        <section>\n          <div>\n            {\" \"}\n            <SpotifyButton\n              myClass={style.myBtn}\n              handleClick={newGenre}\n              genre={\"workout\"}\n              station={\"Squat FM\"}\n            />\n            <SpotifyButton\n              myClass={style.myBtn}\n              handleClick={newGenre}\n              genre={\"jazz\"}\n              station={\"Energizer FM\"}\n            />\n            <SpotifyButton\n              myClass={style.myBtn}\n              handleClick={newGenre}\n              genre={\"classical\"}\n              station={\"Recap Task FM\"}\n            />\n            <SpotifyButton\n              myClass={style.myPlaylistBtn}\n              handleClick={handleClick}\n              station={\"New Playlist\"}\n            />{\" \"}\n          </div>\n        </section>\n      </div>\n      <div className={style.buttons}> </div>\n    </div>\n  );\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}