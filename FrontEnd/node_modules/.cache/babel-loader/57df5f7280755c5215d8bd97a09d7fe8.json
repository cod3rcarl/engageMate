{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/ptPoll/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport style from \"./index.module.css\";\nimport { Button } from \"@chakra-ui/react\";\nimport useSocketContext from \"../../context/socketContext\";\nimport SkPollResults from \"../skPollResults\";\nconst initialState = {\n  session: false,\n  results: false,\n  questionData: {\n    question: \"\",\n    options: [[], []]\n  },\n  choice: \"\",\n  view: \"waiting\"\n}; // ...state.questionData, options: action.options\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"setSession\":\n      return { ...state,\n        questionData: action.data,\n        session: true,\n        view: action.view\n      };\n\n    case \"choice\":\n      return { ...state,\n        choice: action.choice\n      };\n\n    case \"setResults\":\n      return { ...state,\n        results: true,\n        questionData: action.data,\n        view: action.view\n      };\n\n    case \"stopSession\":\n      return { ...state,\n        session: false,\n        questionData: {},\n        view: action.view\n      };\n\n    default:\n      throw new Error();\n  }\n} //use this to do the conditional rendering ->\n\n\nfunction PtPoll() {\n  _s();\n\n  const [myColor, setMyColor] = useState(\"#2C276B\");\n  const [state, dispatch] = useReducer(reducer, initialState); // const [choice, setChoice] = useState(\"\");\n\n  const data = useSocketContext();\n  const socket = data[0];\n  useEffect(() => {\n    //send a request to server asking for latest information\n    //make a live quiz ROOM that sends info to user upon join\n    //socket listener - socket context\n    //if question and option data is set, set session activity to 'true'\n    socket.on(\"pollStart\", ({\n      data\n    }) => {\n      //start a poll session and set question to render\n      console.log({\n        data\n      }); // setQuestionData(data);\n      // setSession((session) => true);\n\n      dispatch({\n        type: \"setSession\",\n        data: data,\n        view: \"session\"\n      });\n      console.log({\n        state\n      }, \"set session\");\n    });\n    socket.on(\"sessionStop\", () => {\n      //end session, reset question display\n      console.log(\"stop session\"); // setSession((session) => false);\n      // setQuestionData({});\n\n      dispatch({\n        type: \"stopSession\",\n        view: \"waiting\"\n      });\n      console.log({\n        state\n      }, \"session stop\");\n    }); // socket.on(\"resultsUpdate\", ({ data }) => {\n    //   //submit results, set states and trigger conditionally rendered results display\n    //   console.log(\"results update received\");\n    //   console.log({ data });\n    //   // setResults((results) => true);\n    //   // setResultsData((resultsData) => data);\n    //   // console.log({ resultsData });\n    //   dispatch({ type: \"setResults\", data: data });\n    //   console.log({ state }, \"results update\");\n    // });\n\n    return () => {\n      //cleanup\n      socket.off(\"pollstart\");\n      socket.off(\"sessionStop\");\n    };\n  }, []);\n\n  function submitVote() {\n    //submits the vote, if choice is set\n    //changes view again to view results (set another state)\n    if (state.choice !== \"\") {\n      socket.emit(\"vote\", {\n        data: state.choice\n      }); // setResults((results) => true);\n\n      dispatch({\n        type: \"setResults\",\n        view: \"results\"\n      });\n      dispatch({\n        type: \"choice\",\n        data: state.choice\n      });\n      console.log(\"vote submitted\", state.choice);\n      console.log({\n        state\n      });\n    } else {\n      console.log(\"choice not set\");\n    }\n  } // function calculateResults(options, oNum) {\n  //   //calculate results value from total votes & votes per option\n  //   const totalVotes = options.reduce((acc, cur) => {\n  //     return acc + cur[3];\n  //   }, 0);\n  //   //oNum out of totalVotes, return as %\n  //   console.log((oNum / totalVotes) * 100);\n  //   return (oNum / totalVotes) * 100;\n  // }\n  //results state - if results state is true, sets session state to FALSE\n  //if results is true AND session is false- displays progress bars with results data\n  //percentage results of each optiong\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.container,\n    style: {\n      backgroundColor: myColor\n    },\n    children: [state.view === \"waiting\" && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Waiting for question.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 36\n    }, this), state.view === \"session\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: state.questionData.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), state.questionData.options.map((o, i) => {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [o[1], /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => dispatch({\n                type: \"choice\",\n                choice: String(o[0])\n              }),\n              children: \"\\u2611\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: state.choice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => submitVote(),\n        children: \"Submit \\u27A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), state.view === \"results\" && /*#__PURE__*/_jsxDEV(SkPollResults, {\n      data: state.questionData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PtPoll, \"bAxkgSmXG655y7exEO7Chr3UHP4=\", false, function () {\n  return [useSocketContext];\n});\n\n_c = PtPoll;\nexport default PtPoll;\n\nvar _c;\n\n$RefreshReg$(_c, \"PtPoll\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/ptPoll/index.js"],"names":["React","useState","useEffect","useReducer","style","Button","useSocketContext","SkPollResults","initialState","session","results","questionData","question","options","choice","view","reducer","state","action","type","data","Error","PtPoll","myColor","setMyColor","dispatch","socket","on","console","log","off","submitVote","emit","container","backgroundColor","map","o","i","String"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\nimport style from \"./index.module.css\";\nimport { Button } from \"@chakra-ui/react\";\n\nimport useSocketContext from \"../../context/socketContext\";\nimport SkPollResults from \"../skPollResults\";\n\nconst initialState = {\n  session: false,\n  results: false,\n  questionData: { question: \"\", options: [[], []] },\n  choice: \"\",\n  view: \"waiting\",\n};\n// ...state.questionData, options: action.options\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"setSession\":\n      return {\n        ...state,\n        questionData: action.data,\n        session: true,\n        view: action.view,\n      };\n    case \"choice\":\n      return { ...state, choice: action.choice };\n    case \"setResults\":\n      return {\n        ...state,\n        results: true,\n        questionData: action.data,\n        view: action.view,\n      };\n    case \"stopSession\":\n      return { ...state, session: false, questionData: {}, view: action.view };\n\n    default:\n      throw new Error();\n  }\n}\n//use this to do the conditional rendering ->\n\nfunction PtPoll() {\n  const [myColor, setMyColor] = useState(\"#2C276B\");\n  const [state, dispatch] = useReducer(reducer, initialState);\n  // const [choice, setChoice] = useState(\"\");\n  const data = useSocketContext();\n  const socket = data[0];\n\n  useEffect(() => {\n    //send a request to server asking for latest information\n    //make a live quiz ROOM that sends info to user upon join\n\n    //socket listener - socket context\n    //if question and option data is set, set session activity to 'true'\n    socket.on(\"pollStart\", ({ data }) => {\n      //start a poll session and set question to render\n      console.log({ data });\n      // setQuestionData(data);\n      // setSession((session) => true);\n\n      dispatch({ type: \"setSession\", data: data, view: \"session\" });\n      console.log({ state }, \"set session\");\n    });\n\n    socket.on(\"sessionStop\", () => {\n      //end session, reset question display\n      console.log(\"stop session\");\n      // setSession((session) => false);\n      // setQuestionData({});\n      dispatch({ type: \"stopSession\", view: \"waiting\" });\n      console.log({ state }, \"session stop\");\n    });\n\n    // socket.on(\"resultsUpdate\", ({ data }) => {\n    //   //submit results, set states and trigger conditionally rendered results display\n    //   console.log(\"results update received\");\n    //   console.log({ data });\n    //   // setResults((results) => true);\n    //   // setResultsData((resultsData) => data);\n    //   // console.log({ resultsData });\n\n    //   dispatch({ type: \"setResults\", data: data });\n    //   console.log({ state }, \"results update\");\n    // });\n\n    return () => {\n      //cleanup\n      socket.off(\"pollstart\");\n      socket.off(\"sessionStop\");\n    };\n  }, []);\n\n  function submitVote() {\n    //submits the vote, if choice is set\n    //changes view again to view results (set another state)\n    if (state.choice !== \"\") {\n      socket.emit(\"vote\", { data: state.choice });\n\n      // setResults((results) => true);\n      dispatch({ type: \"setResults\", view: \"results\" });\n      dispatch({ type: \"choice\", data: state.choice });\n      console.log(\"vote submitted\", state.choice);\n      console.log({ state });\n    } else {\n      console.log(\"choice not set\");\n    }\n  }\n\n  // function calculateResults(options, oNum) {\n  //   //calculate results value from total votes & votes per option\n  //   const totalVotes = options.reduce((acc, cur) => {\n  //     return acc + cur[3];\n  //   }, 0);\n  //   //oNum out of totalVotes, return as %\n  //   console.log((oNum / totalVotes) * 100);\n  //   return (oNum / totalVotes) * 100;\n  // }\n  //results state - if results state is true, sets session state to FALSE\n  //if results is true AND session is false- displays progress bars with results data\n  //percentage results of each optiong\n\n  return (\n    <div className={style.container} style={{ backgroundColor: myColor }}>\n      {state.view === \"waiting\" && <h1>Waiting for question.</h1>}\n      {state.view === \"session\" && (\n        <div>\n          <h1>{state.questionData.question}</h1>\n          {state.questionData.options.map((o, i) => {\n            return (\n              <ul>\n                <li>\n                  {o[1]}\n                  <button\n                    onClick={() =>\n                      dispatch({ type: \"choice\", choice: String(o[0]) })\n                    }\n                  >\n                    ☑\n                  </button>\n                </li>\n              </ul>\n            );\n          })}\n          <p>{state.choice}</p>\n          <Button onClick={() => submitVote()}>Submit ➡</Button>\n        </div>\n      )}\n\n      {state.view === \"results\" && <SkPollResults data={state.questionData} />}\n    </div>\n  );\n}\n\nexport default PtPoll;\n"]},"metadata":{},"sourceType":"module"}