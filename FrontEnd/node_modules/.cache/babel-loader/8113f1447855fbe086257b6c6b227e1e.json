{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/pages/thumb-o-meter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport \"./index.module.css\";\nimport { Button, VStack } from \"@chakra-ui/react\";\nimport PtView from \"../../components/ptView\";\nimport SkView from \"../../components/skView\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:5000\";\nlet socket;\n\nconst Thumbometer = () => {\n  _s();\n\n  const [response, setResponse] = useState(\"\");\n  const [speakerView, setSpeakerView] = useState();\n  const [data, setData] = useState({});\n  const [time, setTime] = useState(0);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    socket = socketIOClient(ENDPOINT);\n    socket.emit(\"connection\"); //join room request - get name, role from auth\n\n    socket.emit(\"joinroom\", {\n      name: \"Ben\",\n      //take from auth\n      role: \"coach\",\n      room: \"thumbometer\"\n    }); //listen for thumb update, take in session data\n    //useEffect - pass down session data obj\n    //start thumb session listener - destructures data and timer, sets state\n\n    socket.on(\"startThumb\", ({\n      sessionData,\n      timer\n    }) => {\n      setData(sessionData);\n      setTime(timer);\n      console.log(\"start thumb recieved\");\n    });\n    socket.on(\"thumbUpdate\", ({\n      sessionData\n    }) => {\n      setData(sessionData);\n      console.log(\"thumb updated\");\n    });\n    socket.on(\"counter\", counter => {\n      setCount(counter);\n      console.log(counter);\n    }); //finished listener - sets final data state\n\n    socket.on(\"finished\", ({\n      sessionData\n    }) => {\n      setData(sessionData);\n      console.log(\"finished session\");\n      console.log({\n        sessionData\n      }); //disable slider here - state\n\n      setCount(0);\n    });\n    return () => socket.disconnect();\n  }, []); //hand this function down to speaker view - pass in q and timer\n\n  function startSession({\n    question,\n    timer\n  }) {\n    socket.emit(\"start\", {\n      question,\n      timer\n    });\n    console.log(\"started session\");\n  } //function to stop the timer and end the session - pass this down to speaker view\n\n\n  function endSession() {\n    socket.emit(\"stopTimer\");\n  } //pass down & call in ppt view - saves sessionData object\n\n\n  function submitData(val) {\n    socket.emit(\"submission\", {\n      value: val\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(VStack, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Thumbometer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"blue\",\n        onClick: () => setSpeakerView(!speakerView),\n        children: speakerView ? \"Show ptView\" : \"Show skView\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), speakerView && /*#__PURE__*/_jsxDEV(SkView, {\n        data: data,\n        startSession: startSession,\n        endSession: endSession,\n        count: count,\n        time: time,\n        setTime: setTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), !speakerView && /*#__PURE__*/_jsxDEV(PtView, {\n        data: data,\n        submit: submitData,\n        time: time,\n        count: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Thumbometer, \"HFyBNPf5jW+aBajFV4JdhJBPhPQ=\");\n\n_c = Thumbometer;\nexport default Thumbometer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thumbometer\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/pages/thumb-o-meter/index.js"],"names":["React","useState","useEffect","NavBar","Button","VStack","PtView","SkView","socketIOClient","ENDPOINT","socket","Thumbometer","response","setResponse","speakerView","setSpeakerView","data","setData","time","setTime","count","setCount","emit","name","role","room","on","sessionData","timer","console","log","counter","disconnect","startSession","question","endSession","submitData","val","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport \"./index.module.css\";\nimport { Button, VStack } from \"@chakra-ui/react\";\nimport PtView from \"../../components/ptView\";\nimport SkView from \"../../components/skView\";\n\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:5000\";\nlet socket;\n\nconst Thumbometer = () => {\n  const [response, setResponse] = useState(\"\");\n  const [speakerView, setSpeakerView] = useState();\n  const [data, setData] = useState({});\n  const [time, setTime] = useState(0);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    socket = socketIOClient(ENDPOINT);\n    socket.emit(\"connection\");\n    //join room request - get name, role from auth\n    socket.emit(\"joinroom\", {\n      name: \"Ben\", //take from auth\n      role: \"coach\",\n      room: \"thumbometer\",\n    });\n\n    //listen for thumb update, take in session data\n    //useEffect - pass down session data obj\n\n    //start thumb session listener - destructures data and timer, sets state\n    socket.on(\"startThumb\", ({ sessionData, timer }) => {\n      setData(sessionData);\n      setTime(timer);\n      console.log(\"start thumb recieved\");\n    });\n\n    socket.on(\"thumbUpdate\", ({ sessionData }) => {\n      setData(sessionData);\n      console.log(\"thumb updated\");\n    });\n\n    socket.on(\"counter\", (counter) => {\n      setCount(counter);\n      console.log(counter);\n    });\n\n    //finished listener - sets final data state\n    socket.on(\"finished\", ({ sessionData }) => {\n      setData(sessionData);\n      console.log(\"finished session\");\n      console.log({ sessionData });\n      //disable slider here - state\n      setCount(0);\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  //hand this function down to speaker view - pass in q and timer\n  function startSession({ question, timer }) {\n    socket.emit(\"start\", { question, timer });\n    console.log(\"started session\");\n  }\n\n  //function to stop the timer and end the session - pass this down to speaker view\n  function endSession() {\n    socket.emit(\"stopTimer\");\n  }\n  //pass down & call in ppt view - saves sessionData object\n  function submitData(val) {\n    socket.emit(\"submission\", { value: val });\n  }\n\n  return (\n    <>\n      <NavBar />{\" \"}\n      <VStack>\n        <h1>Thumbometer</h1>\n        <Button colorScheme=\"blue\" onClick={() => setSpeakerView(!speakerView)}>\n          {speakerView ? \"Show ptView\" : \"Show skView\"}\n        </Button>\n        {speakerView && (\n          <SkView\n            data={data}\n            startSession={startSession}\n            endSession={endSession}\n            count={count}\n            time={time}\n            setTime={setTime}\n          />\n        )}\n        {!speakerView && (\n          <PtView data={data} submit={submitData} time={time} count={count} />\n        )}\n      </VStack>\n    </>\n  );\n};\n\nexport default Thumbometer;\n"]},"metadata":{},"sourceType":"module"}