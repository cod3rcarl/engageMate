{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/pages/thumb-o-meter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport styles from \"./index.module.css\";\nimport PtView from \"../../components/ptView\";\nimport SkView from \"../../components/skView\";\nimport ReducerSkView from \"../../components/skView/skViewReduce\";\nimport Footer from \"../../components/footer\";\nimport Title from \"../../components/heading\";\nimport { createStandaloneToast, LightMode, Text } from \"@chakra-ui/react\";\nimport useRoleContext from \"../../context/roleContext\";\nimport { successToast, burntToast } from \"../../components/toastAlerts/index\";\nimport { Flex, Box, Center, useColorModeValue } from \"@chakra-ui/react\"; // import socketIOClient from \"socket.io-client\";\n\nimport { config } from \"../../config\";\nimport useSocketContext from \"../../context/socketContext\";\nconst {\n  url\n} = config; // const ENDPOINT = url;\n// let socket;\n\nconst Thumbometer = () => {\n  _s();\n\n  // const [speakerView, setSpeakerView] = useState();\n  const [data, setData] = useState({});\n  const [time, setTime] = useState(0);\n  const [count, setCount] = useState(0);\n  const bg = useColorModeValue(\"white\", \"#110042\");\n  const color = useColorModeValue(\"#110042\", \"white\");\n  const context = useSocketContext();\n  const socket = context[0];\n  console.log(socket);\n\n  async function handleSubmit({\n    sessionData\n  }) {\n    //https://callback-cats.herokuapp.com/session\n    console.log(sessionData);\n    const res = await fetch(`${url}/session`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sessionData)\n    }); //check the status of the data that is returned. If not 200 then its an error!\n    //will add a toast pop up here\n\n    if (res.status === 200) {\n      //calls the toast function to create a success popup\n      successToast({\n        name: \"Session Submit Success.\",\n        message: \"successfully submitted data from the session.\"\n      });\n      console.log(\"Success: session data posted\");\n    } else {\n      burntToast({\n        name: \"Failed Session Submission\",\n        message: \"failed to submit session data to the database.\"\n      });\n    }\n  }\n\n  const result = useRoleContext();\n  const role = result[0];\n  const loggedUser = result[2];\n  const name = loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.given_name;\n  console.log(role);\n  console.log(loggedUser);\n  useEffect(() => {\n    //join room request - get name, role from auth\n    socket.emit(\"joinroom\", {\n      name: name,\n      //take from auth\n      role: role,\n      room: \"thumbometer\"\n    }); //start thumb session listener - destructures data and timer, sets state\n\n    socket.on(\"startThumb\", ({\n      sessionData,\n      timer\n    }) => {\n      setData(sessionData);\n      setTime(timer);\n      console.log(\"start thumb recieved\");\n    }); //listen for thumb update, take in session data\n\n    socket.on(\"thumbUpdate\", ({\n      sessionData\n    }) => {\n      setData(sessionData);\n      console.log(\"thumb updated\");\n    }); // listen for counter changes\n\n    socket.on(\"counter\", counter => {\n      setCount(counter);\n      console.log(counter);\n    }); //finished listener - sets final data state\n\n    socket.on(\"finished\", handleFinishEvent); // Clean up\n\n    return () => {\n      socket.emit(\"leaveThumb\");\n      socket.off(\"finished\", handleFinishEvent);\n    };\n  }, []);\n\n  function handleFinishEvent({\n    sessionData\n  }) {\n    setData(sessionData);\n    console.log(\"finished session\");\n    console.log({\n      sessionData\n    }); //call function that posts to session table\n    //success or burnt toast\n\n    role === \"coach\" && name === sessionData.coach && handleSubmit({\n      sessionData\n    }); //disable slider here - state\n\n    setCount(0);\n  } //hand this function down to speaker view - pass in q and timer\n\n\n  function startSession({\n    question,\n    timer,\n    throwaway\n  }) {\n    socket.emit(\"start\", {\n      question,\n      timer,\n      name,\n      throwaway\n    });\n    console.log(\"started session\");\n  } //function to stop the timer and end the session - pass this down to speaker view\n\n\n  function endSession() {\n    socket.emit(\"stopTimer\");\n  } //pass down & call in ppt view - saves sessionData object\n\n\n  function submitData(val) {\n    socket.emit(\"submission\", {\n      value: val\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: styles.container,\n      bg: bg,\n      color: color,\n      w: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Center, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          className: \"player animate__animated animate__heartBeat\",\n          style: {\n            textShadow: \"0px 3px 3px#7f56f2\"\n          },\n          children: [\" \", /*#__PURE__*/_jsxDEV(Title, {\n            text: \"Thumbometer\",\n            heading: \"heading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Center, {\n        children: /*#__PURE__*/_jsxDEV(LightMode, {\n          children: [role !== \"bootcamper\" && /*#__PURE__*/_jsxDEV(SkView, {\n            data: data,\n            startSession: startSession,\n            endSession: endSession,\n            count: count,\n            time: time,\n            setTime: setTime,\n            bg: bg,\n            color: color\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), role === \"bootcamper\" && /*#__PURE__*/_jsxDEV(PtView, {\n            data: data,\n            submit: submitData,\n            time: time,\n            count: count,\n            bg: bg,\n            color: color\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Thumbometer, \"JPD/dzKzYVqyB0sKRLmImLyiKTo=\", false, function () {\n  return [useColorModeValue, useColorModeValue, useSocketContext, useRoleContext];\n});\n\n_c = Thumbometer;\nexport default Thumbometer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thumbometer\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/pages/thumb-o-meter/index.js"],"names":["React","useState","useEffect","NavBar","styles","PtView","SkView","ReducerSkView","Footer","Title","createStandaloneToast","LightMode","Text","useRoleContext","successToast","burntToast","Flex","Box","Center","useColorModeValue","config","useSocketContext","url","Thumbometer","data","setData","time","setTime","count","setCount","bg","color","context","socket","console","log","handleSubmit","sessionData","res","fetch","method","headers","body","JSON","stringify","status","name","message","result","role","loggedUser","given_name","emit","room","on","timer","counter","handleFinishEvent","off","coach","startSession","question","throwaway","endSession","submitData","val","value","container","textShadow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport styles from \"./index.module.css\";\nimport PtView from \"../../components/ptView\";\nimport SkView from \"../../components/skView\";\nimport ReducerSkView from \"../../components/skView/skViewReduce\";\nimport Footer from \"../../components/footer\";\nimport Title from \"../../components/heading\";\nimport { createStandaloneToast, LightMode, Text } from \"@chakra-ui/react\";\nimport useRoleContext from \"../../context/roleContext\";\nimport { successToast, burntToast } from \"../../components/toastAlerts/index\";\nimport { Flex, Box, Center, useColorModeValue } from \"@chakra-ui/react\";\n// import socketIOClient from \"socket.io-client\";\nimport { config } from \"../../config\";\nimport useSocketContext from \"../../context/socketContext\";\nconst { url } = config;\n// const ENDPOINT = url;\n// let socket;\n\nconst Thumbometer = () => {\n  // const [speakerView, setSpeakerView] = useState();\n\n  const [data, setData] = useState({});\n  const [time, setTime] = useState(0);\n  const [count, setCount] = useState(0);\n  const bg = useColorModeValue(\"white\", \"#110042\");\n  const color = useColorModeValue(\"#110042\", \"white\");\n  const context = useSocketContext();\n  const socket = context[0];\n  console.log(socket);\n  async function handleSubmit({ sessionData }) {\n    //https://callback-cats.herokuapp.com/session\n    console.log(sessionData);\n    const res = await fetch(`${url}/session`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(sessionData),\n    });\n\n    //check the status of the data that is returned. If not 200 then its an error!\n    //will add a toast pop up here\n    if (res.status === 200) {\n      //calls the toast function to create a success popup\n      successToast({\n        name: \"Session Submit Success.\",\n        message: \"successfully submitted data from the session.\",\n      });\n      console.log(\"Success: session data posted\");\n    } else {\n      burntToast({\n        name: \"Failed Session Submission\",\n        message: \"failed to submit session data to the database.\",\n      });\n    }\n  }\n\n  const result = useRoleContext();\n  const role = result[0];\n  const loggedUser = result[2];\n  const name = loggedUser?.given_name;\n  console.log(role);\n  console.log(loggedUser);\n\n  useEffect(() => {\n    //join room request - get name, role from auth\n    socket.emit(\"joinroom\", {\n      name: name, //take from auth\n      role: role,\n      room: \"thumbometer\",\n    });\n\n    //start thumb session listener - destructures data and timer, sets state\n    socket.on(\"startThumb\", ({ sessionData, timer }) => {\n      setData(sessionData);\n      setTime(timer);\n      console.log(\"start thumb recieved\");\n    });\n\n    //listen for thumb update, take in session data\n    socket.on(\"thumbUpdate\", ({ sessionData }) => {\n      setData(sessionData);\n      console.log(\"thumb updated\");\n    });\n\n    // listen for counter changes\n    socket.on(\"counter\", (counter) => {\n      setCount(counter);\n      console.log(counter);\n    });\n\n    //finished listener - sets final data state\n    socket.on(\"finished\", handleFinishEvent);\n\n    // Clean up\n    return () => {\n      socket.emit(\"leaveThumb\");\n      socket.off(\"finished\", handleFinishEvent);\n    };\n  }, []);\n\n  function handleFinishEvent({ sessionData }) {\n    setData(sessionData);\n    console.log(\"finished session\");\n    console.log({ sessionData });\n    //call function that posts to session table\n    //success or burnt toast\n    role === \"coach\" &&\n      name === sessionData.coach &&\n      handleSubmit({ sessionData });\n    //disable slider here - state\n    setCount(0);\n  }\n\n  //hand this function down to speaker view - pass in q and timer\n  function startSession({ question, timer, throwaway }) {\n    socket.emit(\"start\", { question, timer, name, throwaway });\n    console.log(\"started session\");\n  }\n\n  //function to stop the timer and end the session - pass this down to speaker view\n  function endSession() {\n    socket.emit(\"stopTimer\");\n  }\n  //pass down & call in ppt view - saves sessionData object\n  function submitData(val) {\n    socket.emit(\"submission\", { value: val });\n  }\n\n  return (\n    <Flex>\n      <Box className={styles.container} bg={bg} color={color} w=\"100%\">\n        <NavBar />\n        <Center>\n          <Text\n            className={\"player animate__animated animate__heartBeat\"}\n            style={{ textShadow: \"0px 3px 3px#7f56f2\" }}\n          >\n            {\" \"}\n            <Title text=\"Thumbometer\" heading=\"heading\" />\n          </Text>\n        </Center>\n\n        <Center>\n          <LightMode>\n            {role !== \"bootcamper\" && (\n              <SkView\n                data={data}\n                startSession={startSession}\n                endSession={endSession}\n                count={count}\n                time={time}\n                setTime={setTime}\n                bg={bg}\n                color={color}\n              />\n            )}\n            {role === \"bootcamper\" && (\n              <PtView\n                data={data}\n                submit={submitData}\n                time={time}\n                count={count}\n                bg={bg}\n                color={color}\n              />\n            )}\n          </LightMode>\n        </Center>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Thumbometer;\n"]},"metadata":{},"sourceType":"module"}