{"ast":null,"code":"import moment from \"moment\"; // Bootcamp Start Date\n\nexport const Bootcamp_Start = moment(\"2020-09-21 00:00\");\n/**\r\n *  Function takes in the date string set by moment.JS.\r\n *  Calculates the week and day from the bootcamp start date.\r\n *  Returns a string with Week Day\r\n */\n\nexport function calcScheduleDate(date) {\n  // Remove date ordinal (st, nd, rd, th)\n  const dateString = moment(date.replace(/(\\d+)(st|nd|rd|th)/, \"$1\")); // Calculate difference between session date and bootcamp start date.\n\n  const diff = moment.duration(dateString.diff(Bootcamp_Start)); // Adjust to show actual week and day session happened.\n\n  const week = Math.floor(diff.asDays() / 7);\n  const day = Math.floor(diff.asDays() % 7);\n  return `Week ${week + 1}, Day ${day + 1}`;\n}\n/**\r\n *  Filters the tableData by the week number and day number entered.\r\n */\n\nexport function filterData(tableData, searchObj) {\n  // Filter data\n  return tableData.filter(session => {\n    const dateString = calcScheduleDate(session.date);\n\n    if (searchObj.throwaway) {\n      return dateString.includes(`Week ${searchObj.week}`) && dateString.includes(`Day ${searchObj.day}`) && session.coach.toLowerCase().includes(searchObj.coach.toLowerCase()) && session.throwaway === searchObj.throwaway;\n    } else {\n      return dateString.includes(`Week ${searchObj.week}`) && dateString.includes(`Day ${searchObj.day}`) && session.coach.toLowerCase().includes(searchObj.coach.toLowerCase());\n    }\n  });\n}","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/sessionFilter/dateFuncs.js"],"names":["moment","Bootcamp_Start","calcScheduleDate","date","dateString","replace","diff","duration","week","Math","floor","asDays","day","filterData","tableData","searchObj","filter","session","throwaway","includes","coach","toLowerCase"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,OAAO,MAAMC,cAAc,GAAGD,MAAM,CAAC,kBAAD,CAA7B;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA0BC,IAA1B,EAAgC;AACrC;AACA,QAAMC,UAAU,GAAGJ,MAAM,CAACG,IAAI,CAACE,OAAL,CAAa,oBAAb,EAAmC,IAAnC,CAAD,CAAzB,CAFqC,CAIrC;;AACA,QAAMC,IAAI,GAAGN,MAAM,CAACO,QAAP,CAAgBH,UAAU,CAACE,IAAX,CAAgBL,cAAhB,CAAhB,CAAb,CALqC,CAOrC;;AACA,QAAMO,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,MAAL,KAAgB,CAA3B,CAAb;AACA,QAAMC,GAAG,GAAGH,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,MAAL,KAAgB,CAA3B,CAAZ;AAEA,SAAQ,QAAOH,IAAI,GAAG,CAAE,SAAQI,GAAG,GAAG,CAAE,EAAxC;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,SAA/B,EAA0C;AAC/C;AACA,SAAOD,SAAS,CAACE,MAAV,CAAkBC,OAAD,IAAa;AACnC,UAAMb,UAAU,GAAGF,gBAAgB,CAACe,OAAO,CAACd,IAAT,CAAnC;;AAEA,QAAIY,SAAS,CAACG,SAAd,EAAyB;AACvB,aACEd,UAAU,CAACe,QAAX,CAAqB,QAAOJ,SAAS,CAACP,IAAK,EAA3C,KACAJ,UAAU,CAACe,QAAX,CAAqB,OAAMJ,SAAS,CAACH,GAAI,EAAzC,CADA,IAEAK,OAAO,CAACG,KAAR,CAAcC,WAAd,GAA4BF,QAA5B,CAAqCJ,SAAS,CAACK,KAAV,CAAgBC,WAAhB,EAArC,CAFA,IAGAJ,OAAO,CAACC,SAAR,KAAsBH,SAAS,CAACG,SAJlC;AAMD,KAPD,MAOO;AACL,aACEd,UAAU,CAACe,QAAX,CAAqB,QAAOJ,SAAS,CAACP,IAAK,EAA3C,KACAJ,UAAU,CAACe,QAAX,CAAqB,OAAMJ,SAAS,CAACH,GAAI,EAAzC,CADA,IAEAK,OAAO,CAACG,KAAR,CAAcC,WAAd,GAA4BF,QAA5B,CAAqCJ,SAAS,CAACK,KAAV,CAAgBC,WAAhB,EAArC,CAHF;AAKD;AACF,GAjBM,CAAP;AAkBD","sourcesContent":["import moment from \"moment\";\r\n\r\n// Bootcamp Start Date\r\nexport const Bootcamp_Start = moment(\"2020-09-21 00:00\");\r\n\r\n/**\r\n *  Function takes in the date string set by moment.JS.\r\n *  Calculates the week and day from the bootcamp start date.\r\n *  Returns a string with Week Day\r\n */\r\nexport function calcScheduleDate(date) {\r\n  // Remove date ordinal (st, nd, rd, th)\r\n  const dateString = moment(date.replace(/(\\d+)(st|nd|rd|th)/, \"$1\"));\r\n\r\n  // Calculate difference between session date and bootcamp start date.\r\n  const diff = moment.duration(dateString.diff(Bootcamp_Start));\r\n\r\n  // Adjust to show actual week and day session happened.\r\n  const week = Math.floor(diff.asDays() / 7);\r\n  const day = Math.floor(diff.asDays() % 7);\r\n\r\n  return `Week ${week + 1}, Day ${day + 1}`;\r\n}\r\n\r\n/**\r\n *  Filters the tableData by the week number and day number entered.\r\n */\r\nexport function filterData(tableData, searchObj) {\r\n  // Filter data\r\n  return tableData.filter((session) => {\r\n    const dateString = calcScheduleDate(session.date);\r\n\r\n    if (searchObj.throwaway) {\r\n      return (\r\n        dateString.includes(`Week ${searchObj.week}`) &&\r\n        dateString.includes(`Day ${searchObj.day}`) &&\r\n        session.coach.toLowerCase().includes(searchObj.coach.toLowerCase()) &&\r\n        session.throwaway === searchObj.throwaway\r\n      );\r\n    } else {\r\n      return (\r\n        dateString.includes(`Week ${searchObj.week}`) &&\r\n        dateString.includes(`Day ${searchObj.day}`) &&\r\n        session.coach.toLowerCase().includes(searchObj.coach.toLowerCase())\r\n      );\r\n    }\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}