{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/skHand/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./index.module.css\";\nimport useSocketContext from \"../../context/socketContext\";\nimport useRoleContext from \"../../context/roleContext\";\nimport Hand from \"../hand\";\n\nfunction SkHand({\n  usersList,\n  handUsers\n}) {\n  _s();\n\n  //when hand is raised, server adds them to a list of raised hands - name, pic\n  const [users, setUsers] = useState();\n  const [hands, setHands] = useState([]);\n  const [handsRaised, setHandsRaised] = useState([]);\n  const [data, setData] = useState();\n  const context = useSocketContext();\n  const result = useRoleContext();\n  const role = result[0];\n  const socket = context[0];\n  const loggedUser = result[2];\n  const name = loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.given_name;\n\n  function handRaises() {\n    //set the state to be the array list of users that was passed in\n    // setHands(handUsers);\n    setHands([{\n      name: \"carl\"\n    }, {\n      name: \"becky\"\n    }, {\n      name: \"kunmi\"\n    }]);\n  }\n\n  function removeHand(index) {\n    // immutably remove individual hand raise\n    setHands([...hands.slice(0, index), ...hands.slice(index + 1)]); //send a message to back end sockets to remove that user\n  }\n\n  useEffect(() => {\n    handRaises();\n    socket.emit(\"joinroom\", {\n      name: name,\n      role: role,\n      room: \"raisehand\"\n    });\n    socket.on(\"handRaiseInfo\", ({\n      handRaiseData,\n      handRaiseSubmissions\n    }) => {\n      setHandsRaised(handRaiseSubmissions);\n      setHands(handRaiseData);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.notifySpot,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: hands.length > 0 ? styles.notify : styles.noNotify,\n        children: hands.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hand, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.handsList,\n      children: hands.map((h, i) => /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles.handRaise,\n          children: [h.name, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeHand(i),\n            children: \"\\u2716\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SkHand, \"PvpFKSywBZh7XNNy09uCEhXRLDU=\", false, function () {\n  return [useSocketContext, useRoleContext];\n});\n\n_c = SkHand;\nexport default SkHand;\n\nvar _c;\n\n$RefreshReg$(_c, \"SkHand\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/skHand/index.js"],"names":["React","useState","useEffect","styles","useSocketContext","useRoleContext","Hand","SkHand","usersList","handUsers","users","setUsers","hands","setHands","handsRaised","setHandsRaised","data","setData","context","result","role","socket","loggedUser","name","given_name","handRaises","removeHand","index","slice","emit","room","on","handRaiseData","handRaiseSubmissions","container","notifySpot","length","notify","noNotify","handsList","map","h","i","handRaise"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./index.module.css\";\nimport useSocketContext from \"../../context/socketContext\";\nimport useRoleContext from \"../../context/roleContext\";\nimport Hand from \"../hand\";\n\nfunction SkHand({ usersList, handUsers }) {\n  //when hand is raised, server adds them to a list of raised hands - name, pic\n  const [users, setUsers] = useState();\n  const [hands, setHands] = useState([]);\n  const [handsRaised, setHandsRaised] = useState([]);\n  const [data, setData] = useState();\n  const context = useSocketContext();\n  const result = useRoleContext();\n  const role = result[0];\n  const socket = context[0];\n  const loggedUser = result[2];\n  const name = loggedUser?.given_name;\n\n  function handRaises() {\n    //set the state to be the array list of users that was passed in\n    // setHands(handUsers);\n    setHands([{ name: \"carl\" }, { name: \"becky\" }, { name: \"kunmi\" }]);\n  }\n\n  function removeHand(index) {\n    // immutably remove individual hand raise\n    setHands([...hands.slice(0, index), ...hands.slice(index + 1)]);\n    //send a message to back end sockets to remove that user\n  }\n\n  useEffect(() => {\n    handRaises();\n\n    socket.emit(\"joinroom\", {\n      name: name,\n      role: role,\n      room: \"raisehand\",\n    });\n\n    socket.on(\"handRaiseInfo\", ({ handRaiseData, handRaiseSubmissions }) => {\n      setHandsRaised(handRaiseSubmissions);\n      setHands(handRaiseData);\n    });\n  }, []);\n  return (\n    <div className={styles.container}>\n      <div className={styles.notifySpot}>\n        <p className={hands.length > 0 ? styles.notify : styles.noNotify}>\n          {hands.length}\n        </p>\n      </div>\n      <Hand />\n\n      {/* renders a box section which contains the ordered list of users with raised hands */}\n      <section className={styles.handsList}>\n        {hands.map((h, i) => (\n          <ul key={i}>\n            <li className={styles.handRaise}>\n              {h.name}\n              <button onClick={() => removeHand(i)}>âœ–</button>\n            </li>\n          </ul>\n        ))}\n      </section>\n    </div>\n  );\n}\n\nexport default SkHand;\n"]},"metadata":{},"sourceType":"module"}