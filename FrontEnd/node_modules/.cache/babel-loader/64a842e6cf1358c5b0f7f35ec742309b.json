{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/pages/thumb-o-meter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport styles from \"./index.module.css\"; // import { Button } from \"@chakra-ui/react\";\n\nimport PtView from \"../../components/ptView\";\nimport SkView from \"../../components/skView\";\nimport useRoleContext from \"../../context/roleContext\";\nimport { Flex, Box, Button, Heading, VStack, Center, useColorModeValue } from \"@chakra-ui/react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"https://callback-cats.herokuapp.com\";\nlet socket;\n\nconst Thumbometer = () => {\n  _s();\n\n  const [response, setResponse] = useState(\"\");\n  const [speakerView, setSpeakerView] = useState();\n  const [data, setData] = useState({});\n  const [time, setTime] = useState(0);\n  const [count, setCount] = useState(0);\n  const bg = useColorModeValue(\"white\", \"#110042\");\n  const color = useColorModeValue(\"#110042\", \"white\");\n  const result = useRoleContext();\n  const role = result[2];\n  console.log(role);\n  useEffect(() => {\n    socket = socketIOClient(ENDPOINT);\n    socket.emit(\"connection\"); //join room request - get name, role from auth\n\n    socket.emit(\"joinroom\", {\n      name: \"Ben\",\n      //take from auth\n      role: \"coach\",\n      room: \"thumbometer\"\n    }); //listen for thumb update, take in session data\n    //useEffect - pass down session data obj\n    //start thumb session listener - destructures data and timer, sets state\n\n    socket.on(\"startThumb\", ({\n      sessionData,\n      timer\n    }) => {\n      setData(sessionData);\n      setTime(timer);\n      console.log(\"start thumb recieved\");\n    });\n    socket.on(\"thumbUpdate\", ({\n      sessionData\n    }) => {\n      setData(sessionData);\n      console.log(\"thumb updated\");\n    });\n    socket.on(\"counter\", counter => {\n      setCount(counter);\n      console.log(counter);\n    }); //finished listener - sets final data state\n\n    socket.on(\"finished\", ({\n      sessionData\n    }) => {\n      setData(sessionData);\n      console.log(\"finished session\");\n      console.log({\n        sessionData\n      }); //disable slider here - state\n\n      setCount(0);\n    });\n    return () => socket.disconnect();\n  }, []); //hand this function down to speaker view - pass in q and timer\n\n  function startSession({\n    question,\n    timer\n  }) {\n    socket.emit(\"start\", {\n      question,\n      timer\n    });\n    console.log(\"started session\");\n  } //function to stop the timer and end the session - pass this down to speaker view\n\n\n  function endSession() {\n    socket.emit(\"stopTimer\");\n  } //pass down & call in ppt view - saves sessionData object\n\n\n  function submitData(val) {\n    socket.emit(\"submission\", {\n      value: val\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: styles.container,\n      bg: bg,\n      color: color,\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Center, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: styles.heading,\n            children: \"Thumb-O-Meter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Center, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: styles.button,\n            bg: \"#7f56f2\",\n            onClick: () => setSpeakerView(!speakerView),\n            children: speakerView ? \"Show ptView\" : \"Show skView\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Center, {\n          children: [speakerView && /*#__PURE__*/_jsxDEV(SkView, {\n            data: data,\n            startSession: startSession,\n            endSession: endSession,\n            count: count,\n            time: time,\n            setTime: setTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), !speakerView && /*#__PURE__*/_jsxDEV(PtView, {\n            data: data,\n            submit: submitData,\n            time: time,\n            count: count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Thumbometer, \"JpAVa+oKlBHhoHmj8bj95/7NVyE=\", false, function () {\n  return [useColorModeValue, useColorModeValue, useRoleContext];\n});\n\n_c = Thumbometer;\nexport default Thumbometer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thumbometer\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/pages/thumb-o-meter/index.js"],"names":["React","useState","useEffect","NavBar","styles","PtView","SkView","useRoleContext","Flex","Box","Button","Heading","VStack","Center","useColorModeValue","socketIOClient","ENDPOINT","socket","Thumbometer","response","setResponse","speakerView","setSpeakerView","data","setData","time","setTime","count","setCount","bg","color","result","role","console","log","emit","name","room","on","sessionData","timer","counter","disconnect","startSession","question","endSession","submitData","val","value","container","heading","button"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,oBAAnB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA,SACEC,IADF,EAEEC,GAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,MALF,EAMEC,MANF,EAOEC,iBAPF,QAQO,kBARP;AASA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,MAAMC,QAAQ,GAAG,qCAAjB;AACA,IAAIC,MAAJ;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,EAA9C;AACA,QAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwB,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM4B,EAAE,GAAGf,iBAAiB,CAAC,OAAD,EAAU,SAAV,CAA5B;AACA,QAAMgB,KAAK,GAAGhB,iBAAiB,CAAC,SAAD,EAAY,OAAZ,CAA/B;AACA,QAAMiB,MAAM,GAAGxB,cAAc,EAA7B;AACA,QAAMyB,IAAI,GAAGD,MAAM,CAAC,CAAD,CAAnB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA9B,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,MAAM,GAAGF,cAAc,CAACC,QAAD,CAAvB;AACAC,IAAAA,MAAM,CAACkB,IAAP,CAAY,YAAZ,EAFc,CAGd;;AACAlB,IAAAA,MAAM,CAACkB,IAAP,CAAY,UAAZ,EAAwB;AACtBC,MAAAA,IAAI,EAAE,KADgB;AACT;AACbJ,MAAAA,IAAI,EAAE,OAFgB;AAGtBK,MAAAA,IAAI,EAAE;AAHgB,KAAxB,EAJc,CAUd;AACA;AAEA;;AACApB,IAAAA,MAAM,CAACqB,EAAP,CAAU,YAAV,EAAwB,CAAC;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,KAAD,KAA4B;AAClDhB,MAAAA,OAAO,CAACe,WAAD,CAAP;AACAb,MAAAA,OAAO,CAACc,KAAD,CAAP;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAJD;AAMAjB,IAAAA,MAAM,CAACqB,EAAP,CAAU,aAAV,EAAyB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAqB;AAC5Cf,MAAAA,OAAO,CAACe,WAAD,CAAP;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,KAHD;AAKAjB,IAAAA,MAAM,CAACqB,EAAP,CAAU,SAAV,EAAsBG,OAAD,IAAa;AAChCb,MAAAA,QAAQ,CAACa,OAAD,CAAR;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYO,OAAZ;AACD,KAHD,EAzBc,CA8Bd;;AACAxB,IAAAA,MAAM,CAACqB,EAAP,CAAU,UAAV,EAAsB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAqB;AACzCf,MAAAA,OAAO,CAACe,WAAD,CAAP;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEK,QAAAA;AAAF,OAAZ,EAHyC,CAIzC;;AACAX,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,KAND;AAQA,WAAO,MAAMX,MAAM,CAACyB,UAAP,EAAb;AACD,GAxCQ,EAwCN,EAxCM,CAAT,CAXwB,CAqDxB;;AACA,WAASC,YAAT,CAAsB;AAAEC,IAAAA,QAAF;AAAYJ,IAAAA;AAAZ,GAAtB,EAA2C;AACzCvB,IAAAA,MAAM,CAACkB,IAAP,CAAY,OAAZ,EAAqB;AAAES,MAAAA,QAAF;AAAYJ,MAAAA;AAAZ,KAArB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,GAzDuB,CA2DxB;;;AACA,WAASW,UAAT,GAAsB;AACpB5B,IAAAA,MAAM,CAACkB,IAAP,CAAY,WAAZ;AACD,GA9DuB,CA+DxB;;;AACA,WAASW,UAAT,CAAoBC,GAApB,EAAyB;AACvB9B,IAAAA,MAAM,CAACkB,IAAP,CAAY,YAAZ,EAA0B;AAAEa,MAAAA,KAAK,EAAED;AAAT,KAA1B;AACD;;AAED,sBACE,QAAC,IAAD;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAE3C,MAAM,CAAC6C,SAAvB;AAAkC,MAAA,EAAE,EAAEpB,EAAtC;AAA0C,MAAA,KAAK,EAAEC,KAAjD;AAAA,6BACE;AAAA,gCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAA,iCACE;AAAI,YAAA,SAAS,EAAE1B,MAAM,CAAC8C,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF,eAKE,QAAC,MAAD;AAAA,iCAEE,QAAC,MAAD;AACE,YAAA,SAAS,EAAE9C,MAAM,CAAC+C,MADpB;AAEE,YAAA,EAAE,EAAC,SAFL;AAGE,YAAA,OAAO,EAAE,MAAM7B,cAAc,CAAC,CAACD,WAAF,CAH/B;AAAA,sBAKGA,WAAW,GAAG,aAAH,GAAmB;AALjC;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,gBALF,eAeE,QAAC,MAAD;AAAA,qBACGA,WAAW,iBACV,QAAC,MAAD;AACE,YAAA,IAAI,EAAEE,IADR;AAEE,YAAA,YAAY,EAAEoB,YAFhB;AAGE,YAAA,UAAU,EAAEE,UAHd;AAIE,YAAA,KAAK,EAAElB,KAJT;AAKE,YAAA,IAAI,EAAEF,IALR;AAME,YAAA,OAAO,EAAEC;AANX;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAWG,CAACL,WAAD,iBACC,QAAC,MAAD;AACE,YAAA,IAAI,EAAEE,IADR;AAEE,YAAA,MAAM,EAAEuB,UAFV;AAGE,YAAA,IAAI,EAAErB,IAHR;AAIE,YAAA,KAAK,EAAEE;AAJT;AAAA;AAAA;AAAA;AAAA,kBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD,CA9GD;;GAAMT,W;UAMOJ,iB,EACGA,iB,EACCP,c;;;KARXW,W;AAgHN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport styles from \"./index.module.css\";\n// import { Button } from \"@chakra-ui/react\";\nimport PtView from \"../../components/ptView\";\nimport SkView from \"../../components/skView\";\nimport useRoleContext from \"../../context/roleContext\";\n\nimport {\n  Flex,\n  Box,\n  Button,\n  Heading,\n  VStack,\n  Center,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"https://callback-cats.herokuapp.com\";\nlet socket;\n\nconst Thumbometer = () => {\n  const [response, setResponse] = useState(\"\");\n  const [speakerView, setSpeakerView] = useState();\n  const [data, setData] = useState({});\n  const [time, setTime] = useState(0);\n  const [count, setCount] = useState(0);\n  const bg = useColorModeValue(\"white\", \"#110042\");\n  const color = useColorModeValue(\"#110042\", \"white\");\n  const result = useRoleContext();\n  const role = result[2];\n  console.log(role);\n  useEffect(() => {\n    socket = socketIOClient(ENDPOINT);\n    socket.emit(\"connection\");\n    //join room request - get name, role from auth\n    socket.emit(\"joinroom\", {\n      name: \"Ben\", //take from auth\n      role: \"coach\",\n      room: \"thumbometer\",\n    });\n\n    //listen for thumb update, take in session data\n    //useEffect - pass down session data obj\n\n    //start thumb session listener - destructures data and timer, sets state\n    socket.on(\"startThumb\", ({ sessionData, timer }) => {\n      setData(sessionData);\n      setTime(timer);\n      console.log(\"start thumb recieved\");\n    });\n\n    socket.on(\"thumbUpdate\", ({ sessionData }) => {\n      setData(sessionData);\n      console.log(\"thumb updated\");\n    });\n\n    socket.on(\"counter\", (counter) => {\n      setCount(counter);\n      console.log(counter);\n    });\n\n    //finished listener - sets final data state\n    socket.on(\"finished\", ({ sessionData }) => {\n      setData(sessionData);\n      console.log(\"finished session\");\n      console.log({ sessionData });\n      //disable slider here - state\n      setCount(0);\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  //hand this function down to speaker view - pass in q and timer\n  function startSession({ question, timer }) {\n    socket.emit(\"start\", { question, timer });\n    console.log(\"started session\");\n  }\n\n  //function to stop the timer and end the session - pass this down to speaker view\n  function endSession() {\n    socket.emit(\"stopTimer\");\n  }\n  //pass down & call in ppt view - saves sessionData object\n  function submitData(val) {\n    socket.emit(\"submission\", { value: val });\n  }\n\n  return (\n    <Flex>\n      <Box className={styles.container} bg={bg} color={color}>\n        <main>\n          <NavBar />\n          <Center>\n            <h1 className={styles.heading}>Thumb-O-Meter</h1>\n          </Center>\n          <Center>\n            {/* instead of the button we want to render either participant view or speaker view based on the role of the user */}\n            <Button\n              className={styles.button}\n              bg=\"#7f56f2\"\n              onClick={() => setSpeakerView(!speakerView)}\n            >\n              {speakerView ? \"Show ptView\" : \"Show skView\"}\n            </Button>\n          </Center>\n          <Center>\n            {speakerView && (\n              <SkView\n                data={data}\n                startSession={startSession}\n                endSession={endSession}\n                count={count}\n                time={time}\n                setTime={setTime}\n              />\n            )}\n            {!speakerView && (\n              <PtView\n                data={data}\n                submit={submitData}\n                time={time}\n                count={count}\n              />\n            )}\n          </Center>\n        </main>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Thumbometer;\n"]},"metadata":{},"sourceType":"module"}