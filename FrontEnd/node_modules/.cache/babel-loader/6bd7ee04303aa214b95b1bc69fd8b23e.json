{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/excel/excel.js\",\n    _s = $RefreshSig$();\n\nimport XLSX from \"xlsx\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { config } from \"../../config\";\nlet dummy = [{\n  name: \"jayanth\",\n  data: \"scd\",\n  abc: \"sdef\"\n}];\n\nconst Excel = () => {\n  _s();\n\n  console.log(window.XLSX);\n  const [dummyData, setDummyData] = useState(dummy);\n  const [selectedFile, setSelectedFile] = useState();\n  const [json, setJson] = useState();\n  const {\n    url\n  } = config;\n\n  const handleClick = () => {\n    XLSX.utils.json_to_sheet(dummyData, \"out.xlsx\");\n\n    if (selectedFile) {\n      let fileReader = new FileReader();\n      fileReader.readAsBinaryString(selectedFile);\n\n      fileReader.onload = event => {\n        let data = event.target.result;\n        let workbook = XLSX.read(data, {\n          type: \"binary\"\n        });\n        console.log(workbook);\n        workbook.SheetNames.forEach(sheet => {\n          let rowObject = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheet]);\n          console.log(rowObject);\n          setJson(JSON.stringify(rowObject, undefined, 4));\n        });\n      };\n    }\n  };\n\n  const handleChange = e => {\n    setSelectedFile(e.target.files[0]);\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const obj = {\n      json,\n      uuid: uuidv4()\n    }; // not sure if the above line will add uuid to every object\n\n    const res = await fetch(`${url}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    }); //check the status of the data that is returned. If not 200 then its an error!\n    //will add a toast pop up here\n\n    if (res.status === 200) {//calls the toast function to create a success popup\n      //   successToast();\n      //   console.log(\"Success: user added\");\n      //   setUpdatePage(!updatePage);\n      // } else {\n      //   burntToast();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xls,.xlsx\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Excel, \"oLQq/DifxlpUzwG78KA7Nq4jx3U=\");\n\n_c = Excel;\nexport default Excel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Excel\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/excel/excel.js"],"names":["XLSX","React","useState","v4","uuidv4","config","dummy","name","data","abc","Excel","console","log","window","dummyData","setDummyData","selectedFile","setSelectedFile","json","setJson","url","handleClick","utils","json_to_sheet","fileReader","FileReader","readAsBinaryString","onload","event","target","result","workbook","read","type","SheetNames","forEach","sheet","rowObject","sheet_to_row_object_array","Sheets","JSON","stringify","undefined","handleChange","e","files","handleSubmit","preventDefault","obj","uuid","res","fetch","method","headers","body","status"],"mappings":"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","sourcesContent":["import XLSX from \"xlsx\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { config } from \"../../config\";\nlet dummy = [\n  {\n    name: \"jayanth\",\n    data: \"scd\",\n    abc: \"sdef\",\n  },\n];\n\nconst Excel = () => {\n  console.log(window.XLSX);\n  const [dummyData, setDummyData] = useState(dummy);\n  const [selectedFile, setSelectedFile] = useState();\n  const [json, setJson] = useState();\n  const { url } = config;\n  const handleClick = () => {\n    XLSX.utils.json_to_sheet(dummyData, \"out.xlsx\");\n    if (selectedFile) {\n      let fileReader = new FileReader();\n      fileReader.readAsBinaryString(selectedFile);\n      fileReader.onload = (event) => {\n        let data = event.target.result;\n        let workbook = XLSX.read(data, { type: \"binary\" });\n        console.log(workbook);\n        workbook.SheetNames.forEach((sheet) => {\n          let rowObject = XLSX.utils.sheet_to_row_object_array(\n            workbook.Sheets[sheet]\n          );\n          console.log(rowObject);\n          setJson(JSON.stringify(rowObject, undefined, 4));\n        });\n      };\n    }\n  };\n\n  const handleChange = (e) => {\n    setSelectedFile(e.target.files[0]);\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const obj = { json, uuid: uuidv4() };\n    // not sure if the above line will add uuid to every object\n    const res = await fetch(`${url}/users`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(obj),\n    });\n    //check the status of the data that is returned. If not 200 then its an error!\n    //will add a toast pop up here\n    if (res.status === 200) {\n      //calls the toast function to create a success popup\n      //   successToast();\n      //   console.log(\"Success: user added\");\n      //   setUpdatePage(!updatePage);\n      // } else {\n      //   burntToast();\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".xls,.xlsx\" onChange={handleChange} />\n      <button onClick={handleClick}>Convert</button>\n      <button onClick={handleSubmit}></button>\n    </div>\n  );\n};\n\nexport default Excel;\n"]},"metadata":{},"sourceType":"module"}