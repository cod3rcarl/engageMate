{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/pages/thumb-o-meter/skViewThumbometer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport styles from \"./index.module.css\";\nimport PtView from \"../../components/ptView\";\nimport SkView from \"../../components/skView\";\nimport { createStandaloneToast, LightMode } from \"@chakra-ui/react\";\nimport useRoleContext from \"../../context/roleContext\";\nimport CustomButton from \"../../components/button\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { useLocalStorage } from \"../../hooks/useLocalStorage\";\nimport { Flex, Box, Center, useColorModeValue } from \"@chakra-ui/react\"; // import socketIOClient from \"socket.io-client\";\n\nimport { config } from \"../../config\";\nimport useSocketContext from \"../../context/socketContext\";\nconst {\n  url\n} = config; // const ENDPOINT = url;\n// let socket;\n\nconst SThumbometer = () => {\n  _s();\n\n  // const [speakerView, setSpeakerView] = useState();\n  const [data, setData] = useState({});\n  const [time, setTime] = useState(0);\n  const [count, setCount] = useState(0);\n  const bg = useColorModeValue(\"white\", \"#110042\");\n  const color = useColorModeValue(\"white\", \"white\");\n  const context = useSocketContext();\n  const result = useRoleContext();\n  const socket = context[0];\n  const role = result[0];\n  const loggedUser = result[2];\n  const name = loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.given_name;\n  console.log(socket);\n\n  async function handleSubmit({\n    sessionData\n  }) {\n    //https://callback-cats.herokuapp.com/session\n    console.log(sessionData);\n    const res = await fetch(`${url}/session`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sessionData)\n    }); //check the status of the data that is returned. If not 200 then its an error!\n    //will add a toast pop up here\n\n    if (res.status === 200) {\n      //calls the toast function to create a success popup\n      successToast({\n        name: \"Session Submit Success.\",\n        message: \"successfully submitted data from the session.\"\n      });\n      console.log(\"Success: session data posted\");\n    } else {\n      burntToast({\n        name: \"Failed Session Submission\",\n        message: \"failed to submit session data to the database.\"\n      });\n    }\n  }\n\n  function successToast(successObject) {\n    const toast = createStandaloneToast();\n    toast({\n      title: successObject.name,\n      description: successObject.message,\n      status: \"success\",\n      duration: 9000,\n      isClosable: true\n    });\n  }\n\n  function burntToast(error) {\n    const toast = createStandaloneToast();\n    toast({\n      title: error.name,\n      description: error.message,\n      status: \"error\",\n      duration: 10000,\n      isClosable: true\n    });\n    console.log(error);\n  }\n\n  useEffect(() => {\n    // socket = socketIOClient(ENDPOINT);\n    // socket.emit(\"connection\");\n    //join room request - get name, role from auth\n    socket.emit(\"joinroom\", {\n      name: name,\n      //take from auth\n      role: role,\n      room: \"thumbometer\"\n    }, []); //listen for thumb update, take in session data\n    //useEffect - pass down session data obj\n    //start thumb session listener - destructures data and timer, sets state\n\n    socket.on(\"startThumb\", ({\n      sessionData,\n      timer\n    }) => {\n      setData(sessionData);\n      setTime(timer);\n      console.log(\"start thumb recieved\");\n    });\n    socket.on(\"thumbUpdate\", ({\n      sessionData\n    }) => {\n      setData(sessionData);\n      console.log(\"thumb updated\");\n    });\n    socket.on(\"counter\", counter => {\n      setCount(counter);\n      console.log(counter);\n    }); //finished listener - sets final data state\n\n    socket.on(\"finished\", ({\n      sessionData\n    }) => {\n      setData(sessionData);\n      console.log(\"finished session\");\n      console.log({\n        sessionData\n      }); //call function that posts to session table\n      //success or burnt toast\n\n      role === \"coach\" && name === sessionData.coach && handleSubmit({\n        sessionData\n      }); //disable slider here - state\n\n      setCount(0);\n    }); // return () => socket.disconnect();\n  }, []); //hand this function down to speaker view - pass in q and timer\n\n  function startSession({\n    question,\n    timer,\n    throwaway\n  }) {\n    socket.emit(\"start\", {\n      question,\n      timer,\n      name,\n      throwaway\n    });\n    console.log(\"started session\");\n  } //function to stop the timer and end the session - pass this down to speaker view\n\n\n  function endSession() {\n    socket.emit(\"stopTimer\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: styles.container,\n      bg: bg,\n      color: color,\n      h: \"50%\",\n      w: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Center, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: styles.heading,\n          children: \"Thumb-O-Meter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Center, {\n        className: styles.backButton,\n        children: /*#__PURE__*/_jsxDEV(CustomButton, {\n          link: \"/\",\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 40\n          }, this),\n          text: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Center, {\n        children: /*#__PURE__*/_jsxDEV(LightMode, {\n          children: /*#__PURE__*/_jsxDEV(SkView, {\n            data: data,\n            startSession: startSession,\n            endSession: endSession,\n            count: count,\n            time: time,\n            setTime: setTime,\n            bg: bg,\n            color: color\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SThumbometer, \"JPD/dzKzYVqyB0sKRLmImLyiKTo=\", false, function () {\n  return [useColorModeValue, useColorModeValue, useSocketContext, useRoleContext];\n});\n\n_c = SThumbometer;\nexport default SThumbometer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SThumbometer\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/pages/thumb-o-meter/skViewThumbometer.js"],"names":["React","useState","useEffect","NavBar","styles","PtView","SkView","createStandaloneToast","LightMode","useRoleContext","CustomButton","ArrowBackIcon","useLocalStorage","Flex","Box","Center","useColorModeValue","config","useSocketContext","url","SThumbometer","data","setData","time","setTime","count","setCount","bg","color","context","result","socket","role","loggedUser","name","given_name","console","log","handleSubmit","sessionData","res","fetch","method","headers","body","JSON","stringify","status","successToast","message","burntToast","successObject","toast","title","description","duration","isClosable","error","emit","room","on","timer","counter","coach","startSession","question","throwaway","endSession","container","heading","backButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport styles from \"./index.module.css\";\nimport PtView from \"../../components/ptView\";\nimport SkView from \"../../components/skView\";\nimport { createStandaloneToast, LightMode } from \"@chakra-ui/react\";\nimport useRoleContext from \"../../context/roleContext\";\nimport CustomButton from \"../../components/button\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { useLocalStorage } from \"../../hooks/useLocalStorage\";\nimport { Flex, Box, Center, useColorModeValue } from \"@chakra-ui/react\";\n// import socketIOClient from \"socket.io-client\";\nimport { config } from \"../../config\";\nimport useSocketContext from \"../../context/socketContext\";\nconst { url } = config;\n// const ENDPOINT = url;\n// let socket;\n\nconst SThumbometer = () => {\n  // const [speakerView, setSpeakerView] = useState();\n  const [data, setData] = useState({});\n  const [time, setTime] = useState(0);\n  const [count, setCount] = useState(0);\n  const bg = useColorModeValue(\"white\", \"#110042\");\n  const color = useColorModeValue(\"white\", \"white\");\n  const context = useSocketContext();\n  const result = useRoleContext();\n  const socket = context[0];\n  const role = result[0];\n  const loggedUser = result[2];\n  const name = loggedUser?.given_name;\n\n  console.log(socket);\n  async function handleSubmit({ sessionData }) {\n    //https://callback-cats.herokuapp.com/session\n    console.log(sessionData);\n    const res = await fetch(`${url}/session`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(sessionData),\n    });\n\n    //check the status of the data that is returned. If not 200 then its an error!\n    //will add a toast pop up here\n    if (res.status === 200) {\n      //calls the toast function to create a success popup\n      successToast({\n        name: \"Session Submit Success.\",\n        message: \"successfully submitted data from the session.\",\n      });\n      console.log(\"Success: session data posted\");\n    } else {\n      burntToast({\n        name: \"Failed Session Submission\",\n        message: \"failed to submit session data to the database.\",\n      });\n    }\n  }\n\n  function successToast(successObject) {\n    const toast = createStandaloneToast();\n    toast({\n      title: successObject.name,\n      description: successObject.message,\n      status: \"success\",\n      duration: 9000,\n      isClosable: true,\n    });\n  }\n\n  function burntToast(error) {\n    const toast = createStandaloneToast();\n    toast({\n      title: error.name,\n      description: error.message,\n      status: \"error\",\n      duration: 10000,\n      isClosable: true,\n    });\n    console.log(error);\n  }\n\n  useEffect(() => {\n    // socket = socketIOClient(ENDPOINT);\n    // socket.emit(\"connection\");\n    //join room request - get name, role from auth\n    socket.emit(\n      \"joinroom\",\n      {\n        name: name, //take from auth\n        role: role,\n        room: \"thumbometer\",\n      },\n      []\n    );\n\n    //listen for thumb update, take in session data\n    //useEffect - pass down session data obj\n\n    //start thumb session listener - destructures data and timer, sets state\n    socket.on(\"startThumb\", ({ sessionData, timer }) => {\n      setData(sessionData);\n      setTime(timer);\n      console.log(\"start thumb recieved\");\n    });\n\n    socket.on(\"thumbUpdate\", ({ sessionData }) => {\n      setData(sessionData);\n      console.log(\"thumb updated\");\n    });\n\n    socket.on(\"counter\", (counter) => {\n      setCount(counter);\n      console.log(counter);\n    });\n\n    //finished listener - sets final data state\n    socket.on(\"finished\", ({ sessionData }) => {\n      setData(sessionData);\n      console.log(\"finished session\");\n      console.log({ sessionData });\n      //call function that posts to session table\n      //success or burnt toast\n      role === \"coach\" &&\n        name === sessionData.coach &&\n        handleSubmit({ sessionData });\n      //disable slider here - state\n      setCount(0);\n    });\n\n    // return () => socket.disconnect();\n  }, []);\n\n  //hand this function down to speaker view - pass in q and timer\n  function startSession({ question, timer, throwaway }) {\n    socket.emit(\"start\", { question, timer, name, throwaway });\n    console.log(\"started session\");\n  }\n\n  //function to stop the timer and end the session - pass this down to speaker view\n  function endSession() {\n    socket.emit(\"stopTimer\");\n  }\n\n  return (\n    <Flex>\n      <Box className={styles.container} bg={bg} color={color} h=\"50%\" w=\"100%\">\n        <NavBar />\n        <Center>\n          <h1 className={styles.heading}>Thumb-O-Meter</h1>\n        </Center>\n        <Center className={styles.backButton}>\n          <CustomButton link=\"/\" icon={<ArrowBackIcon />} text={\"Back\"} />\n        </Center>\n\n        <Center>\n          <LightMode>\n            <SkView\n              data={data}\n              startSession={startSession}\n              endSession={endSession}\n              count={count}\n              time={time}\n              setTime={setTime}\n              bg={bg}\n              color={color}\n            />\n          </LightMode>\n        </Center>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default SThumbometer;\n"]},"metadata":{},"sourceType":"module"}