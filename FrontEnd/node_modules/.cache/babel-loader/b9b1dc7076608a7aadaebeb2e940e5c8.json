{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/skPoll/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport style from \"./index.module.css\";\nimport { Input, Select, Stack, HStack, Button } from \"@chakra-ui/react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport useSocketContext from \"../../context/socketContext\";\nimport SkPollResults from \"../skPollResults\";\n\nfunction SkPoll() {\n  _s();\n\n  const [question, setQuestion] = useState(\"Set Custom Question\");\n  const [custom, setCustom] = useState(false);\n  const [myColor] = useState(\"#2C276B\");\n  const [value, setValue] = useState(0);\n  const [optionData, setOptionData] = useState([]);\n  const [resultsObj, setResultsObj] = useState({});\n  const [pollStarted, setPollStarted] = useState(false);\n  const context = useSocketContext();\n  const socket = context[0];\n  useEffect(() => {\n    socket.on(\"resultsUpdate\", obj => {\n      console.log(\"Results update received\");\n      updateResultsObj(obj);\n    });\n    socket.on(\"pollStart\", ({\n      data\n    }) => {\n      console.log(\"data from server at poll start\", data);\n    });\n    return () => {\n      socket.off(\"resultsUpdate\");\n      socket.off(\"pollStart\");\n    };\n  }, []);\n\n  function updateResultsObj(obj) {\n    console.log(\"Results update received\", obj);\n    setResultsObj(obj.data);\n  }\n\n  const arr = [];\n\n  for (let i = 0; i < value; i++) {\n    // console.log(i);\n    arr.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        placeholder: `set option ${i + 1}` // still trying to figure how to save the value of the input fields to something?\n        ,\n        width: \"300px\",\n        id: i + 1,\n        onChange: handleOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"correctButton\",\n        value: `${i + 1}`,\n        className: style.radio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this));\n  }\n\n  function handleOptions(e) {\n    setOptionData({ ...optionData,\n      [e.target.id]: e.target.value\n    });\n  }\n\n  function remove() {\n    arr.pop();\n    setValue(value - 1);\n    console.log(arr);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const correct = e.target.elements.correctButton.value;\n    const obj = {\n      question,\n      options: Object.keys(optionData).map(key => [Number(key), optionData[key], 0]),\n      correctAnswer: correct,\n      uuid: uuidv4()\n    };\n    startPoll(obj);\n  }\n\n  function handleSession(e) {\n    if (e.target.value !== \"custom\") {\n      setCustom(false);\n      setQuestion(e.target.value);\n      console.log({\n        question\n      });\n    }\n\n    if (e.target.value === \"custom\") {\n      setCustom(true);\n    }\n  }\n\n  function startPoll(data) {\n    socket.emit(\"pollStart\", {\n      data\n    });\n    setPollStarted(true);\n    setResultsObj(data);\n    console.log(\"Poll started - Data sent to server\", {\n      data\n    });\n  }\n\n  function stopPoll() {\n    setPollStarted(false);\n    setQuestion(question => \"\");\n    setOptionData(optionData => {});\n    setResultsObj(resultsObj => {});\n    setCustom(custom => false);\n    socket.emit(\"sessionStop\");\n    console.log(\"Speaker has ended poll\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!pollStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.container,\n      style: {\n        backgroundColor: myColor\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          placeholder: \"Select a question\",\n          onChange: handleSession,\n          className: style.select,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Which one is the odd one out?\",\n            children: \"Which one is the odd one out?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"custom\",\n            children: \"Set a custom question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          focusBorderColor: \"lime\",\n          className: style.borderColor,\n          style: custom ? {\n            display: \"block\",\n            textAlign: \"center\",\n            borderColor: \"grey\"\n          } : {\n            display: \"none\"\n          },\n          placeholder: \"set custom question...\",\n          type: \"text\",\n          onChange: e => setQuestion(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          className: \"optionsInput\",\n          children: arr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          children: [value < 4 ? /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setValue(value + 1),\n            children: \":pencil2:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this) : \"\", /*#__PURE__*/_jsxDEV(Button, {\n            onClick: remove,\n            children: \":wastebasket:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), pollStarted && /*#__PURE__*/_jsxDEV(SkPollResults, {\n      data: resultsObj,\n      stopPoll: stopPoll,\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SkPoll, \"AXPk+jVkOKLOms5xqEXFt5+E/vg=\", false, function () {\n  return [useSocketContext];\n});\n\n_c = SkPoll;\nexport default SkPoll;\n\nvar _c;\n\n$RefreshReg$(_c, \"SkPoll\");","map":{"version":3,"sources":["/Users/mcintosh/Desktop/Final/front-end-final-project-callback-cats/thumb-o-meter/src/components/skPoll/index.js"],"names":["React","useState","useEffect","style","Input","Select","Stack","HStack","Button","v4","uuidv4","useSocketContext","SkPollResults","SkPoll","question","setQuestion","custom","setCustom","myColor","value","setValue","optionData","setOptionData","resultsObj","setResultsObj","pollStarted","setPollStarted","context","socket","on","obj","console","log","updateResultsObj","data","off","arr","i","push","handleOptions","radio","e","target","id","remove","pop","handleSubmit","preventDefault","correct","elements","correctButton","options","Object","keys","map","key","Number","correctAnswer","uuid","startPoll","handleSession","emit","stopPoll","container","backgroundColor","select","borderColor","display","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport style from \"./index.module.css\";\nimport { Input, Select, Stack, HStack, Button } from \"@chakra-ui/react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport useSocketContext from \"../../context/socketContext\";\nimport SkPollResults from \"../skPollResults\";\n\nfunction SkPoll() {\n  const [question, setQuestion] = useState(\"Set Custom Question\");\n  const [custom, setCustom] = useState(false);\n  const [myColor] = useState(\"#2C276B\");\n  const [value, setValue] = useState(0);\n  const [optionData, setOptionData] = useState([]);\n  const [resultsObj, setResultsObj] = useState({});\n  const [pollStarted, setPollStarted] = useState(false);\n\n  const context = useSocketContext();\n  const socket = context[0];\n\n  useEffect(() => {\n    socket.on(\"resultsUpdate\", (obj) => {\n      console.log(\"Results update received\");\n      updateResultsObj(obj);\n    });\n\n    socket.on(\"pollStart\", ({ data }) => {\n      console.log(\"data from server at poll start\", data);\n    });\n\n    return () => {\n      socket.off(\"resultsUpdate\");\n      socket.off(\"pollStart\");\n    };\n  }, []);\n\n  function updateResultsObj(obj) {\n    console.log(\"Results update received\", obj);\n    setResultsObj(obj.data);\n  }\n\n  const arr = [];\n  for (let i = 0; i < value; i++) {\n    // console.log(i);\n    arr.push(\n      <div>\n        <Input\n          type=\"text\"\n          placeholder={`set option ${i + 1}`}\n          // still trying to figure how to save the value of the input fields to something?\n          width=\"300px\"\n          id={i + 1}\n          onChange={handleOptions}\n        ></Input>\n        <input\n          type=\"radio\"\n          name=\"correctButton\"\n          value={`${i + 1}`}\n          className={style.radio}\n        />\n      </div>\n    );\n  }\n\n  function handleOptions(e) {\n    setOptionData({\n      ...optionData,\n      [e.target.id]: e.target.value,\n    });\n  }\n\n  function remove() {\n    arr.pop();\n    setValue(value - 1);\n    console.log(arr);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const correct = e.target.elements.correctButton.value;\n    const obj = {\n      question,\n      options: Object.keys(optionData).map((key) => [\n        Number(key),\n        optionData[key],\n        0,\n      ]),\n      correctAnswer: correct,\n      uuid: uuidv4(),\n    };\n\n    startPoll(obj);\n  }\n\n  function handleSession(e) {\n    if (e.target.value !== \"custom\") {\n      setCustom(false);\n      setQuestion(e.target.value);\n      console.log({ question });\n    }\n    if (e.target.value === \"custom\") {\n      setCustom(true);\n    }\n  }\n\n  function startPoll(data) {\n    socket.emit(\"pollStart\", { data });\n    setPollStarted(true);\n    setResultsObj(data);\n    console.log(\"Poll started - Data sent to server\", { data });\n  }\n\n  function stopPoll() {\n    setPollStarted(false);\n    setQuestion((question) => \"\");\n    setOptionData((optionData) => {});\n    setResultsObj((resultsObj) => {});\n    setCustom((custom) => false);\n    socket.emit(\"sessionStop\");\n    console.log(\"Speaker has ended poll\");\n  }\n\n  return (\n    <div>\n      {!pollStarted && (\n        <div className={style.container} style={{ backgroundColor: myColor }}>\n          <form onSubmit={handleSubmit}>\n            <Select\n              placeholder=\"Select a question\"\n              onChange={handleSession}\n              className={style.select}\n            >\n              <option value=\"Which one is the odd one out?\">\n                Which one is the odd one out?\n              </option>\n              <option value=\"custom\">Set a custom question</option>\n            </Select>\n            <Input\n              focusBorderColor=\"lime\"\n              className={style.borderColor}\n              style={\n                custom\n                  ? {\n                      display: \"block\",\n                      textAlign: \"center\",\n                      borderColor: \"grey\",\n                    }\n                  : { display: \"none\" }\n              }\n              placeholder=\"set custom question...\"\n              type=\"text\"\n              onChange={(e) => setQuestion(e.target.value)}\n            />\n            <Stack className=\"optionsInput\">{arr}</Stack>\n            <HStack>\n              {value < 4 ? (\n                <Button onClick={() => setValue(value + 1)}>:pencil2:</Button>\n              ) : (\n                \"\"\n              )}\n              <Button onClick={remove}>:wastebasket:</Button>\n              <Button type=\"submit\">Submit</Button>\n            </HStack>\n          </form>\n        </div>\n      )}\n      {pollStarted && (\n        <SkPollResults data={resultsObj} stopPoll={stopPoll} socket={socket} />\n      )}\n    </div>\n  );\n}\nexport default SkPoll;\n"]},"metadata":{},"sourceType":"module"}